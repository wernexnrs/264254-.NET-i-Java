@page "/games/details"
@inject Zadanie2.Data.ApplicationDbContext DB
@using Zadanie2.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Game</h4>
    <hr />
    @if (game is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@game.Title</dd>

            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@game.Description</dd>

            <dt class="col-sm-2">Release Date</dt>
            <dd class="col-sm-10">@game.ReleaseDate</dd>

            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@game.Rate</dd>

            <dt class="col-sm-2">Image</dt>
            <dd class="col-sm-10">
                @if (!string.IsNullOrEmpty(game.ImageUrl))
                {
                    <img src="@(NavigationManager.BaseUri + game.ImageUrl)" alt="Game Image" class="img-thumbnail" style="max-width: 400px;" />

                }
                else
                {
                    <p><em>No Image Available tha is: @(NavigationManager.BaseUri + game.ImageUrl)</em></p>
                }
            </dd>
        </dl>

        <div class="mb-3">
            <label for="newRating" class="form-label">New Rating (0-10)</label>
            <input type="number" id="newRating" class="form-control" min="0" max="10" step="0.1" @bind="NewRating" />
            <button class="btn btn-primary mt-2" @onclick="UpdateRating">Submit Rating</button>
        </div>

        <div>
            <a href="@($"/games/edit?id={game.Id}")">Edit</a> |
            <a href="@($"/games")">Back to List</a>
        </div>
    }
</div>

@code {
    game? game;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private float? NewRating { get; set; }

    protected override async Task OnInitializedAsync()
    {
        game = await DB.game.FirstOrDefaultAsync(m => m.Id == Id);

        if (game is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateRating()
    {
        if (game != null && NewRating != null)
        {
            if (game.Rate != null)
            {
                game.Rate = (game.Rate + NewRating) / 2;
            }
            else
            {
                game.Rate = NewRating;
            }

            DB.Update(game);
            await DB.SaveChangesAsync();
        }
    }
}
