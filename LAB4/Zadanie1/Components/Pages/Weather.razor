@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input class="form-control" @oninput="@InputFilter" placeholder="Filter by summary" />
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>

        <p>Number of warm days: {@warmDays}</p>
        <button class="btn btn-primary" @onclick="() => FilterByTemperature(15)">Show Warm Days</button>
        <button class="btn btn-secondary" @onclick="RestoreForecasts">Restore</button>
    </table>
}

@code {
    private WeatherForecast[]? originalForecasts;
    private WeatherForecast[]? forecasts;
    private int warmDays;
    private string summaryFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        originalForecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
            
        }).ToArray();

        forecasts = originalForecasts;

        CountWarmDays();
    }
    private void CountWarmDays()
    {
        warmDays = forecasts!.Count(f => f.TemperatureC > 15);
    }

    private void FilterByTemperature(int threshold)
    {
        forecasts = originalForecasts!.Where(f => f.TemperatureC >= threshold).ToArray();
        CountWarmDays();
    }

    private void RestoreForecasts()
    {
        forecasts = originalForecasts;
        CountWarmDays();
    }

    private void InputFilter(ChangeEventArgs e)
    {
        summaryFilter = e.Value?.ToString() ?? string.Empty;
        forecasts = originalForecasts!.Where(f => f.Summary?.Contains(summaryFilter, StringComparison.OrdinalIgnoreCase) ?? false).ToArray();
        CountWarmDays();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
